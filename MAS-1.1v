  // Version 1.1 
  // 1- Module GY-80 10 DOF (accelerometer) is operational
  // 2- I2C Scanner is Operational
  // 3- Communicates with Java via Javino Protocol
  // Author: Arthur Rodrigues Xavier da Silva
  // @ArthurGamer1 arxdsilva@gmail.com
  // ________________________________________________________________
  
   
  #include <Javino.h>
      //1.1-Library needed and definitions
  #include <Wire.h>
  #define Register_ID 0
  #define Register_2D 0x2D
  #define Register_X0 0x32
  #define Register_X1 0x33
  #define Register_Y0 0x34
  #define Register_Y1 0x35
  #define Register_Z0 0x36
  #define Register_Z1 0x37
      //1.2-sensor I2C address : 83 decimal or 0x53
  int ADXAddress = 0x53;  // the default 7-bit slave address
  int reading = 0;
  int val=0;
  int X0,X1,X_out;
  int Y0,Y1,Y_out;
  int Z1,Z0,Z_out;
  double Xg,Yg,Zg;
  String Xout,Yout,Zout;
  Javino j;
   //Port Numberts to Communicate with all motors.
    int IN1 = 4;
    int IN2 = 5;
    int IN3 = 6;
    int IN4 = 7;
    int IN5 = 8;
    int IN6 = 9;
    int IN7 = 10;
    int IN8 = 11;
  
  void setup() {
   pinMode(IN1, OUTPUT);
   pinMode(IN2, OUTPUT);
   pinMode(IN3, OUTPUT);
   pinMode(IN4, OUTPUT);
   pinMode(IN5, OUTPUT);
   pinMode(IN6, OUTPUT);
   pinMode(IN7, OUTPUT);
   pinMode(IN8, OUTPUT);
   Serial.begin(9600);
   
   //1.2-Library call
    Wire.begin();                
    Serial.begin(9600);    
    delay(100);
    // enable to measure g data
    Wire.beginTransmission(ADXAddress);
    Wire.write(Register_2D);
    Wire.write(8);                //measuring enable
    Wire.endTransmission();     // stop transmitting
    
  }
  
  void loop() 
  {
    if (j.availablemsg()){answer(j.getmsg());}
    
   //1.3-Main loop function to the module
   //--------------X
    Wire.beginTransmission(ADXAddress); // transmit to device
    Wire.write(Register_X0);
    Wire.write(Register_X1);
    Wire.endTransmission();
    Wire.requestFrom(ADXAddress,2); 
      if(Wire.available()<=2)   {
      X0 = Wire.read();
      X1 = Wire.read(); 
      X1=X1<<8;
      X_out=X0+X1;   
    }
   //------------------Y
    Wire.beginTransmission(ADXAddress); // transmit to device
    Wire.write(Register_Y0);
    Wire.write(Register_Y1);
    Wire.endTransmission();
    Wire.requestFrom(ADXAddress,2); 
      if(Wire.available()<=2)   {
      Y0 = Wire.read();
      Y1 = Wire.read(); 
      Y1=Y1<<8;
      Y_out=Y0+Y1;
    }
    //------------------Z
    Wire.beginTransmission(ADXAddress); // transmit to device
    Wire.write(Register_Z0);
    Wire.write(Register_Z1);
    Wire.endTransmission();
    Wire.requestFrom(ADXAddress,2); 
       if(Wire.available()<=2)   {
         Z0 = Wire.read();
         Z1 = Wire.read(); 
         Z1=Z1<<8;
         Z_out=Z0+Z1;
    } 
       
    Xg=X_out/256.0;
    Yg=Y_out/256.0;
    Zg=Z_out/256.0;
  
    Serial.print("X= ");
    Serial.print(Xg);
    Serial.print("       ");
    Serial.print("Y= ");
    Serial.print(Yg);
    Serial.print("       ");
    Serial.print("Z= ");
    Serial.print(Zg);
    Serial.println("  ");   
  
      Xout=String(Xg);
      Yout=String(Yg);
      Zout=String(Zg);
    
        j.sendmsg(Xout);
        j.sendmsg(Yout);  
        j.sendmsg(Zout);  
    delay(100);
   }
  
   void answer(String ask) {
       answer(j.getmsg());
         
       if (ask == "goAhead"){goAhead();}
               else if (ask == "goBack"){goBack();}
               else if (ask == "turnLeft"){turnLeft();}
               else if (ask == "turnRight"){turnRight();}
               else (ask == "Stop");{Stop();}
      }
    
     //1.4-Sends to the Java program the coordinates of X,Y,Z
    //according to the accelerometer
   
    void goAhead() {
     //Gira o Motor A
   digitalWrite(IN1, LOW);
   digitalWrite(IN2, HIGH);
   //Gira o Motor B 
   digitalWrite(IN3, HIGH);
   digitalWrite(IN4, LOW);
   //Gira o Motor C 
   digitalWrite(IN5, LOW);
   digitalWrite(IN6, HIGH);
   //Gira o Motor D 
   digitalWrite(IN7, LOW);
   digitalWrite(IN8, HIGH);
     }
    
    void goBack() {
     //Gira o Motor A
   digitalWrite(IN1, HIGH);
   digitalWrite(IN2, LOW);
   //Gira o Motor B 
   digitalWrite(IN3, LOW);
   digitalWrite(IN4, HIGH);
   //Gira o Motor C 
   digitalWrite(IN5, HIGH);
   digitalWrite(IN6, LOW);
   //Gira o Motor D 
   digitalWrite(IN7, HIGH);
   digitalWrite(IN8, LOW);
     }
    
      void turnLeft() {
   //Gira o Motor A 
   digitalWrite(IN1, HIGH);
   digitalWrite(IN2, LOW);
   //Gira o Motor B 
   digitalWrite(IN3, LOW);
   digitalWrite(IN4, HIGH);
   //Gira o Motor C 
   digitalWrite(IN5, LOW);
   digitalWrite(IN6, HIGH);
   //Gira o Motor D 
   digitalWrite(IN7, LOW);
   digitalWrite(IN8, HIGH);
     }
     
     void turnRight() {
   //Gira o Motor A 
   digitalWrite(IN1, LOW);
   digitalWrite(IN2, HIGH);
   //Gira o Motor B 
   digitalWrite(IN3, HIGH);
   digitalWrite(IN4, LOW);
   //Gira o Motor C 
   digitalWrite(IN5, HIGH);
   digitalWrite(IN6, LOW);
   //Gira o Motor D 
   digitalWrite(IN7, HIGH);
   digitalWrite(IN8, LOW);
     }
     
   void Stop() {
   //Gira o Motor A 
   digitalWrite(IN1, LOW);
   digitalWrite(IN2, LOW);
   //Gira o Motor B 
   digitalWrite(IN3, LOW);
   digitalWrite(IN4, LOW);
   //Gira o Motor C 
   digitalWrite(IN5, LOW);
   digitalWrite(IN6, LOW);
   //Gira o Motor D 
   digitalWrite(IN7, LOW);
   digitalWrite(IN8, LOW);
     
  }
